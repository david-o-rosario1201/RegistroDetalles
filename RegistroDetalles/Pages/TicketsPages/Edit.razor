@page "/EditTickets"
@page "/EditTickets/ticketId={ticketId:int}"
@* @rendermode InteractiveServer
@attribute [StreamRendering] *@
@inject HttpClient httpClient
@inject NavigationManager NavigationManager

<PageTitle>Editar Ticket</PageTitle>
<EditForm Model="ticket" OnValidSubmit="Modificar">
	<DataAnnotationsValidator />
	<div class="container">
		<div class="card shadow-lg">
			@*Header*@
			<div class="card-header">
				<h3><strong>Editar Ticket</strong></h3>
			</div>
			@*Cuerpo*@
			<div class="card-body">
				<div class="mb-3">
					<div class="col-4">
						@*Ticket ID*@
						<label class="form-label" for="ticketId"><strong>TicketId:</strong></label>
						<InputNumber id="ticketId" class="form-control" @bind-Value="ticket.TicketId" readonly></InputNumber>
					</div>
				</div>
				<div class="mb-3">
					<div class="col-4">
						@*Fecha*@
						<label class="form-label" for="fecha"><strong>Fecha:</strong></label>
						<InputDate id="fecha" class="form-control" @bind-Value="ticket.Fecha"></InputDate>
						<ValidationMessage For="@(() => ticket.Fecha)"></ValidationMessage>
					</div>
				</div>
				<div class="mb-3">
					<div class="col-4">
						@*Asunto*@
						<label class="form-label" for="asunto"><strong>Asunto:</strong></label>
						<InputText id="asunto" class="form-control" @bind-Value="ticket.Asunto" placeholder="Ingrese un asunto"></InputText>
						<ValidationMessage For="@(() => ticket.Asunto)"></ValidationMessage>
					</div>
				</div>
				<div class="mb-3">
					<div class="col-4">
						@*Solicitado Por*@
						<label class="form-label" for="solicitado"><strong>SolicitadoPor:</strong></label>
						<InputText id="solicitado" class="form-control" @bind-Value="ticket.SolicitadoPor" placeholder="Ingrese el nombre de quien solicita el ticket"></InputText>
						<ValidationMessage For="@(() => ticket.SolicitadoPor)"></ValidationMessage>
					</div>
				</div>
				<div class="mb-3">
					<div class="col-4">
						@*Cliente*@
						<label class="form-label" for="cliente"><strong>Cliente:</strong></label>
						<InputText id="cliente" class="form-control" @bind-Value="ticket.Cliente"></InputText>
						<ValidationMessage For="@(() => ticket.Cliente)"></ValidationMessage>
					</div>
				</div>
				<div class="mb-3">
					<div class="col-4">
						@*Sistema*@
						<label class="form-label" for="sistema"><strong>Sistema:</strong></label>
						<InputText id="sistema" class="form-control" @bind-Value="ticket.Sistema"></InputText>
						<ValidationMessage For="@(() => ticket.Sistema)"></ValidationMessage>
					</div>
				</div>
				<div class="mb-3">
					<div class="col-4">
						@*Prioridad*@
						<label class="form-label" for="prioridad"><strong>Prioridad:</strong></label>
						<InputText id="prioridad" class="form-control" @bind-Value="ticket.Prioridad"></InputText>
						<ValidationMessage For="@(() => ticket.Prioridad)"></ValidationMessage>
					</div>
				</div>
				<div class="mb-3">
					<div class="col-4">
						@*Descripción*@
						<label class="form-label" for="descripcion"><strong>Descripci&oacute;n:</strong></label>
						<InputTextArea id="descripcion" class="form-control" @bind-Value="ticket.Descripcion" placeholder="Ingrese una descripción"></InputTextArea>
						<ValidationMessage For="@(() => ticket.Descripcion)"></ValidationMessage>
					</div>
				</div>
				<div class="mb-3"></div>
			</div>

			@*TicketsDetalles*@
			@*Header*@
			<div class="card card-header">
				<h3><strong>TicketsDetalle</strong></h3>
			</div>
			@*Body*@
			<div class="card-body border border-1">
				@*Emisor*@
				<div class="mb-3">
					<div class="col-4">
						<label class="form-label" for="emisor"><strong>Emisor:</strong></label>
						<InputText id="emisor" class="form-control" @bind-Value="ticketsDetalle.Emisor" placeholder="Ingrese su nombre"></InputText>
						<ValidationMessage For="@(()=> ticketsDetalle.Emisor)"></ValidationMessage>
					</div>
				</div>
				@*Mensaje*@
				<div class="mb-3">
					<div class="col-4">
						<label class="form-label" for="mensaje"><strong>Mensaje:</strong></label>
						<InputTextArea id="mensaje" class="form-control" @bind-Value="ticketsDetalle.Mensaje" placeholder="Ingrese un mensaje"></InputTextArea>
						<ValidationMessage For="@(()=> ticketsDetalle.Mensaje)"></ValidationMessage>
					</div>
				</div>
				@*Boton*@
				<div class="mb-3">
					<div class="col-4">
						<button type="button" class="btn btn-outline-success" @onclick="AgregarDetalle"><i class="bi bi-plus-circle" /> Agregar</button>
					</div>
				</div>
			</div>


			@if (detalles.Count > 0)
			{
				@*Table Detalles*@
				<table class="table table-bordered miTabla">
					<thead>
						<tr>
							<th>TicketId</th>
							<th>Emisor</th>
							<th>Mensaje</th>
						</tr>
					</thead>
					<tbody>
						@foreach (var detalle in detalles)
						{
							<tr>
								<td>@detalle.TicketId</td>
								<td>@detalle.Emisor</td>
								<td>@detalle.Mensaje</td>
								<td><button type="button" class="btn btn-outline-danger" @onclick="()=> EliminarDetalle(detalle.Id)"><i class="bi bi-trash3-fill" /></button></td>
							</tr>
						}
					</tbody>
				</table>
			}

			@*Boton*@
			<div class="card-footer d-flex justify-content-center">
				<div class="px-2">
					<button type="button" class="btn btn-outline-primary" @onclick="IrAPaginaDestino"><i class="bi bi-box-arrow-left" /> Volver</button>
				</div>
				<button type="submit" class="btn btn-outline-success">
					<i class="bi bi-floppy-fill" /> Modificar
				</button>
			</div>
		</div>
	</div>
	@*Mensaje*@
	@mensaje
</EditForm>

@code {
	[Parameter]
	public int ticketId { get; set; }
	public Tickets ticket { get; set; } = new Tickets();
	public TicketsDetalles ticketsDetalle { get; set; } = new TicketsDetalles();
	public List<TicketsDetalles> detalles = new List<TicketsDetalles>();
	public string mensaje { get; set; } = string.Empty;

	protected override async Task OnInitializedAsync()
	{
		await Task.Delay(500);

		if (ticketId > 0)
		{
			ticket = await httpClient.GetFromJsonAsync<Tickets>($"api/Tickets/{ticketId}");
			ticketsDetalle.TicketId = ticket.TicketId;
			detalles = await httpClient.GetFromJsonAsync<List<TicketsDetalles>>("api/TicketsDetalles");
			Filtrado(detalles);
		}
	}

	public async Task Modificar()
	{
		var response = await httpClient.PutAsJsonAsync($"api/Tickets/{ticket.TicketId}", ticket);
		if (response.IsSuccessStatusCode)
		{
			mensaje = "El ticket se modificó con éxito";
		}
		else
			mensaje = "El ticket no se pudo modificar con éxito";
	}

	public async Task AgregarDetalle()
	{
		Console.WriteLine(ticketsDetalle.TicketId);
		if (!string.IsNullOrEmpty(ticketsDetalle.Mensaje) && !string.IsNullOrEmpty(ticketsDetalle.Emisor))
		{
			var detalleResponse = await httpClient.PostAsJsonAsync("api/TicketsDetalles", ticketsDetalle);
			if (detalleResponse.IsSuccessStatusCode)
			{
				ticket.TicketsDetalle.Add(ticketsDetalle);
				var detalle = await httpClient.GetFromJsonAsync<List<TicketsDetalles>>("api/TicketsDetalles");
				Filtrado(detalle);
			}
			else
			{
				mensaje = "Error al guardar el detalle";
			}
		}
		else
			mensaje = "No deben haber campos vacíos";
	}

	public async Task Filtrado(List<TicketsDetalles> detalleList)
	{
		List<TicketsDetalles> filtro = new List<TicketsDetalles>();
		foreach (var detalle in detalleList)
		{
			if (detalle.TicketId == ticketId)
				filtro.Add(detalle);
		}

		if (filtro.Count != 0)
			detalles = filtro;
	}
	public async Task EliminarDetalle(int id)
	{
		var response = await httpClient.DeleteAsync($"api/TicketsDetalles/{id}");
		if (response.IsSuccessStatusCode)
		{
			//var detalle = await response.Content.ReadFromJsonAsync<TicketsDetalles>();
			detalles =  await httpClient.GetFromJsonAsync<List<TicketsDetalles>>("api/TicketsDetalles");
			Filtrado(detalles);
		}
	}

	void IrAPaginaDestino()
	{
		NavigationManager.NavigateTo("/Tickets");
	}
}
